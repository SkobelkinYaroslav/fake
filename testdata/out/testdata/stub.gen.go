// Code generated by mockgen. DO NOT EDIT.

package mocks

import (
	"fmt"
	_ "github.com/sonalys/fake/boilerplate"
	"github.com/sonalys/fake/testdata"
	"testing"
	"time"
)

type StubInterface[T comparable] struct {
	setupInterf mock[func(a any, b interface {
		A() int
	})]
	setupKillYourself mock[func(in *<-chan time.Time, outs ...chan int) error]
	setupEmpty        mock[func()]
	setupWeird        mock[func(a0 map[stub.T]func(in ...*chan<- time.Time)) stub.T]
}

func NewStubInterface[T comparable](t *testing.T) *StubInterface[T] {
	return &StubInterface{
		setupInterf: newMock[func(a any, b interface {
			A() int
		})](t),
		setupKillYourself: newMock[func(in *<-chan time.Time, outs ...chan int) error](t),
		setupEmpty:        newMock[func()](t),
		setupWeird:        newMock[func(a0 map[stub.T]func(in ...*chan<- time.Time)) stub.T](t),
	}
}

func (s *StubInterface) AssertExpectations(t *testing.T) bool {
	return s.setupInterf.AssertExpectations(t) &&
		s.setupKillYourself.AssertExpectations(t) &&
		s.setupEmpty.AssertExpectations(t) &&
		s.setupWeird.AssertExpectations(t) &&
		true
}

func (s *StubInterface) OnInterf(funcs ...func(a any, b interface {
	A() int
})) Config {
	return s.setupInterf.append(funcs...)
}

func (s *StubInterface[T]) Interf(a any, b interface {
	A() int
}) {
	f, ok := s.setupInterf.call()
	if !ok {
		panic(fmt.Sprintf("unexpected call Interf(%v,%v)", a, b))
	}
	(*f)(a, b)
}

func (s *StubInterface) OnKillYourself(funcs ...func(in *<-chan time.Time, outs ...chan int) error) Config {
	return s.setupKillYourself.append(funcs...)
}

func (s *StubInterface[T]) KillYourself(in *<-chan time.Time, outs ...chan int) error {
	f, ok := s.setupKillYourself.call()
	if !ok {
		panic(fmt.Sprintf("unexpected call KillYourself(%v,%v)", in, outs))
	}
	return (*f)(in, outs...)
}

func (s *StubInterface) OnEmpty(funcs ...func()) Config {
	return s.setupEmpty.append(funcs...)
}

func (s *StubInterface[T]) Empty() {
	f, ok := s.setupEmpty.call()
	if !ok {
		panic(fmt.Sprintf("unexpected call Empty()"))
	}
	(*f)()
}

func (s *StubInterface) OnWeird(funcs ...func(a0 map[stub.T]func(in ...*chan<- time.Time)) stub.T) Config {
	return s.setupWeird.append(funcs...)
}

func (s *StubInterface[T]) Weird(a0 map[stub.T]func(in ...*chan<- time.Time)) stub.T {
	f, ok := s.setupWeird.call()
	if !ok {
		panic(fmt.Sprintf("unexpected call Weird(%v)", a0))
	}
	return (*f)(a0)
}
